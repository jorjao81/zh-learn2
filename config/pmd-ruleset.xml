<?xml version="1.0"?>
<ruleset name="zh-learn PMD Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        PMD ruleset for zh-learn project
        Focus: Design analysis, var keyword prohibition, and code quality
        Avoids duplication with Checkstyle rules
    </description>

    <!-- ========================================== -->
    <!-- CONSTITUTIONAL REQUIREMENTS                -->
    <!-- ========================================== -->

    <!-- Ban var keyword (Constitution: Java Style Guide - Never use var) -->
    <rule ref="category/java/codestyle.xml/UseExplicitTypes">
        <priority>1</priority>
        <properties>
            <!-- Don't allow var even with literals or constructors -->
            <property name="allowLiterals" value="false"/>
            <property name="allowCtors" value="false"/>
        </properties>
    </rule>

    <!-- Ban catching generic exceptions (Constitution: Fail-Fast Philosophy) -->
    <rule ref="category/java/design.xml/AvoidCatchingGenericException">
        <priority>1</priority>
    </rule>

    <!-- ========================================== -->
    <!-- IMPORTS & NAMING                            -->
    <!-- ========================================== -->

    <!-- Force use of imports instead of fully qualified names (Constitution: Java Style Guide) -->
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName">
        <priority>2</priority>
    </rule>

    <!-- Don't use dollar signs in identifiers -->
    <rule ref="category/java/codestyle.xml/AvoidDollarSigns">
        <priority>2</priority>
    </rule>

    <!-- Field naming conventions -->
    <rule ref="category/java/codestyle.xml/FieldNamingConventions">
        <priority>3</priority>
    </rule>

    <!-- Formal parameter naming conventions -->
    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions">
        <priority>3</priority>
    </rule>

    <!-- Local variable naming conventions -->
    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
        <priority>3</priority>
    </rule>

    <!-- Method naming conventions -->
    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <priority>3</priority>
    </rule>

    <!-- Class naming conventions -->
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <priority>3</priority>
    </rule>

    <!-- ========================================== -->
    <!-- UNUSED CODE DETECTION                       -->
    <!-- ========================================== -->

    <!-- Detect unused local variables -->
    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable">
        <priority>2</priority>
    </rule>

    <!-- Detect unused private fields -->
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField">
        <priority>2</priority>
    </rule>

    <!-- Detect unused private methods -->
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
        <priority>2</priority>
    </rule>

    <!-- Detect unused formal parameters -->
    <rule ref="category/java/bestpractices.xml/UnusedFormalParameter">
        <priority>3</priority>
    </rule>

    <!-- ========================================== -->
    <!-- EXCEPTION HANDLING                          -->
    <!-- (Constitution: Never catch exceptions unless explicitly told) -->
    <!-- ========================================== -->

    <!-- Don't catch Throwable -->
    <rule ref="category/java/design.xml/AvoidCatchingThrowable">
        <priority>1</priority>
    </rule>

    <!-- Don't throw raw exception types -->
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes">
        <priority>2</priority>
    </rule>

    <!-- Don't lose exception information when rethrowing -->
    <rule ref="category/java/design.xml/AvoidLosingExceptionInformation">
        <priority>2</priority>
    </rule>

    <!-- Exception as flow control is prohibited -->
    <rule ref="category/java/design.xml/ExceptionAsFlowControl">
        <priority>2</priority>
    </rule>

    <!-- ========================================== -->
    <!-- CODE STRUCTURE & DESIGN                     -->
    <!-- ========================================== -->

    <!-- Detect god classes (too many methods/fields) -->
    <rule ref="category/java/design.xml/GodClass">
        <priority>3</priority>
    </rule>

    <!-- Limit cyclomatic complexity -->
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <priority>3</priority>
        <properties>
            <property name="classReportLevel" value="80"/>
            <property name="methodReportLevel" value="10"/>
        </properties>
    </rule>

    <!-- Limit cognitive complexity -->
    <rule ref="category/java/design.xml/CognitiveComplexity">
        <priority>3</priority>
        <properties>
            <property name="reportLevel" value="15"/>
        </properties>
    </rule>

    <!-- Avoid deeply nested if statements -->
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
        <priority>3</priority>
        <properties>
            <property name="problemDepth" value="3"/>
        </properties>
    </rule>

    <!-- Excessive method length -->
    <rule ref="category/java/design.xml/ExcessiveMethodLength">
        <priority>3</priority>
        <properties>
            <property name="minimum" value="100"/>
        </properties>
    </rule>

    <!-- Excessive parameter list -->
    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <priority>3</priority>
        <properties>
            <property name="minimum" value="10"/>
        </properties>
    </rule>

    <!-- Use varargs instead of array parameters when appropriate -->
    <rule ref="category/java/design.xml/UseVarargs">
        <priority>3</priority>
    </rule>

    <!-- Law of Demeter violations -->
    <rule ref="category/java/design.xml/LawOfDemeter">
        <priority>3</priority>
    </rule>

    <!-- ========================================== -->
    <!-- BEST PRACTICES                              -->
    <!-- ========================================== -->

    <!-- Don't use empty catch blocks -->
    <rule ref="category/java/bestpractices.xml/EmptyCatchBlock">
        <priority>1</priority>
    </rule>

    <!-- Arrays should be declared with trailing brackets -->
    <rule ref="category/java/codestyle.xml/ArraysAsListOfArrays">
        <priority>3</priority>
    </rule>

    <!-- Use Collection.isEmpty() instead of .size() == 0 -->
    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty">
        <priority>3</priority>
    </rule>

    <!-- Don't compare objects with equals() when checking identity -->
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals">
        <priority>2</priority>
    </rule>

    <!-- Simplify boolean expressions -->
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions">
        <priority>3</priority>
    </rule>

    <!-- Simplify boolean returns -->
    <rule ref="category/java/design.xml/SimplifyBooleanReturns">
        <priority>3</priority>
    </rule>

    <!-- Switch statements should have a default label -->
    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt">
        <priority>3</priority>
    </rule>

    <!-- Use equals() correctly -->
    <rule ref="category/java/errorprone.xml/EqualsNull">
        <priority>2</priority>
    </rule>

    <!-- System.out/err should not be used in production -->
    <rule ref="category/java/bestpractices.xml/SystemPrintln">
        <priority>3</priority>
    </rule>

    <!-- Avoid reassigning parameters -->
    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters">
        <priority>3</priority>
    </rule>

    <!-- Use String.equals() instead of == for string comparison -->
    <rule ref="category/java/errorprone.xml/StringComparison">
        <priority>2</priority>
    </rule>

    <!-- ========================================== -->
    <!-- PERFORMANCE                                 -->
    <!-- ========================================== -->

    <!-- Avoid instantiating Boolean objects -->
    <rule ref="category/java/performance.xml/BooleanInstantiation">
        <priority>3</priority>
    </rule>

    <!-- Use String.valueOf() instead of concatenation with empty string -->
    <rule ref="category/java/performance.xml/UseStringValueOf">
        <priority>3</priority>
    </rule>

    <!-- StringBuilder/StringBuffer instantiation can be simplified -->
    <rule ref="category/java/performance.xml/StringInstantiation">
        <priority>3</priority>
    </rule>

    <!-- Avoid unnecessary if-then for returns -->
    <rule ref="category/java/performance.xml/SimplifyStartsWith">
        <priority>3</priority>
    </rule>

    <!-- ========================================== -->
    <!-- ERROR-PRONE PATTERNS                        -->
    <!-- ========================================== -->

    <!-- Assignment in operand -->
    <rule ref="category/java/errorprone.xml/AssignmentInOperand">
        <priority>2</priority>
    </rule>

    <!-- Avoid branching statement as last in loop -->
    <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop">
        <priority>2</priority>
    </rule>

    <!-- Broken null check -->
    <rule ref="category/java/errorprone.xml/BrokenNullCheck">
        <priority>1</priority>
    </rule>

    <!-- Check for skip() result -->
    <rule ref="category/java/errorprone.xml/CheckSkipResult">
        <priority>2</priority>
    </rule>

    <!-- Close resource in finally or use try-with-resources -->
    <rule ref="category/java/errorprone.xml/CloseResource">
        <priority>2</priority>
    </rule>

    <!-- Don't call System.exit() -->
    <rule ref="category/java/errorprone.xml/DoNotCallSystemExit">
        <priority>1</priority>
    </rule>

    <!-- Empty if statement -->
    <rule ref="category/java/errorprone.xml/EmptyIfStmt">
        <priority>2</priority>
    </rule>

    <!-- Empty while statement -->
    <rule ref="category/java/errorprone.xml/EmptyWhileStmt">
        <priority>2</priority>
    </rule>

    <!-- Finalize should be avoided -->
    <rule ref="category/java/errorprone.xml/EmptyFinalizer">
        <priority>2</priority>
    </rule>

    <!-- Don't override both finalize() and Object.finalize() -->
    <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize">
        <priority>2</priority>
    </rule>

    <!-- Misplaced null check -->
    <rule ref="category/java/errorprone.xml/MisplacedNullCheck">
        <priority>1</priority>
    </rule>

    <!-- Return from finally block -->
    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock">
        <priority>1</priority>
    </rule>

    <!-- Unconditional if statement -->
    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement">
        <priority>2</priority>
    </rule>

    <!-- ========================================== -->
    <!-- DOCUMENTATION (Minimal)                     -->
    <!-- (Constitution: No code comments unless documenting non-obvious behaviour) -->
    <!-- ========================================== -->

    <!-- Comment content should not be empty -->
    <rule ref="category/java/documentation.xml/CommentContent">
        <priority>3</priority>
    </rule>

    <!-- Comment size should be reasonable -->
    <rule ref="category/java/documentation.xml/CommentSize">
        <priority>3</priority>
        <properties>
            <property name="maxLines" value="20"/>
            <property name="maxLineLength" value="120"/>
        </properties>
    </rule>

</ruleset>
