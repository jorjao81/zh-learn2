<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration for zh-learn project
    Focus: Code style, naming conventions, and interface type enforcement
    Avoids duplication with PMD rules
-->

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java"/>

    <!-- Exclude generated code and build outputs -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>

    <!-- Suppressions support for @SuppressWarnings -->
    <module name="SuppressWarningsFilter"/>

    <!-- TreeWalker: File content checks -->
    <module name="TreeWalker">
        <!-- Enable @SuppressWarnings support -->
        <module name="SuppressWarningsHolder"/>

        <!-- ========================================== -->
        <!-- CONSTITUTIONAL REQUIREMENTS                -->
        <!-- ========================================== -->

        <!-- Ban catching generic exceptions (Constitution: Fail-Fast Philosophy) -->
        <module name="IllegalCatch">
            <property name="illegalClassNames" value="
                java.lang.Exception,
                java.lang.RuntimeException,
                java.lang.Throwable,
                java.lang.Error"/>
        </module>

        <!-- Prefer interfaces over implementations (Constitution: Java Style Guide) -->
        <module name="IllegalType">
            <property name="illegalClassNames" value="
                java.util.ArrayList,
                java.util.HashMap,
                java.util.HashSet,
                java.util.LinkedList,
                java.util.LinkedHashMap,
                java.util.LinkedHashSet,
                java.util.TreeMap,
                java.util.TreeSet,
                java.util.Vector,
                java.util.Hashtable,
                java.util.GregorianCalendar"/>
            <property name="memberModifiers" value=""/>
        </module>

        <!-- ========================================== -->
        <!-- IMPORTS                                     -->
        <!-- ========================================== -->

        <!-- No star imports - use explicit imports (Constitution: Java Style Guide) -->
        <module name="AvoidStarImport"/>

        <!-- Remove unused imports -->
        <module name="UnusedImports"/>

        <!-- Enforce import ordering -->
        <module name="ImportOrder">
            <property name="groups" value="java,javax,jakarta,org,com"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <property name="option" value="top"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
        </module>

        <!-- No redundant imports -->
        <module name="RedundantImport"/>

        <!-- ========================================== -->
        <!-- IMMUTABILITY (Constitution: Java Style Guide) -->
        <!-- ========================================== -->

        <!-- Enforce final for local variables -->
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="validateEnhancedForLoopVariable" value="true"/>
        </module>

        <!-- Enforce final for parameters -->
        <module name="FinalParameters"/>

        <!-- ========================================== -->
        <!-- NAMING CONVENTIONS                          -->
        <!-- ========================================== -->

        <!-- Package names: lowercase -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <!-- Type names: PascalCase -->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Method names: camelCase -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Member names: camelCase -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Parameter names: camelCase -->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Local variable names: camelCase -->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Constant names: UPPER_SNAKE_CASE -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>

        <!-- Static non-final fields: camelCase -->
        <module name="StaticVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Class type parameter names: single uppercase letter or PascalCase -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]([A-Z0-9]*)?$"/>
        </module>

        <!-- Method type parameter names: single uppercase letter or PascalCase -->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]([A-Z0-9]*)?$"/>
        </module>

        <!-- Interface type parameter names: single uppercase letter or PascalCase -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z]([A-Z0-9]*)?$"/>
        </module>

        <!-- Record component names: camelCase -->
        <module name="RecordComponentName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- ========================================== -->
        <!-- CODE STRUCTURE                              -->
        <!-- ========================================== -->

        <!-- Require default case in switch statements -->
        <module name="MissingSwitchDefault"/>

        <!-- One top-level class per file -->
        <module name="OneTopLevelClass"/>

        <!-- Ensure proper declaration order -->
        <module name="DeclarationOrder"/>

        <!-- ========================================== -->
        <!-- WHITESPACE & FORMATTING                     -->
        <!-- (Minimal - Spotless handles most)           -->
        <!-- ========================================== -->

        <!-- No whitespace after -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="AT, INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT, ARRAY_DECLARATOR, INDEX_OP"/>
        </module>

        <!-- No whitespace before -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
        </module>

        <!-- Whitespace around operators -->
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
        </module>

        <!-- ========================================== -->
        <!-- BEST PRACTICES                              -->
        <!-- ========================================== -->

        <!-- Avoid nested blocks -->
        <module name="AvoidNestedBlocks"/>

        <!-- Ensure empty statements are intentional -->
        <module name="EmptyStatement"/>

        <!-- String literals should be on the left in equals comparisons -->
        <module name="EqualsAvoidNull"/>

        <!-- Override equals when overriding hashCode -->
        <module name="EqualsHashCode"/>

        <!-- No magic numbers (except -1, 0, 1, 2) -->
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 1, 2"/>
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreAnnotation" value="true"/>
            <property name="ignoreFieldDeclaration" value="true"/>
        </module>

        <!-- Simplify boolean expressions -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Simplify boolean returns -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Check for proper override annotation -->
        <module name="MissingOverride"/>

        <!-- Package declaration required -->
        <module name="PackageDeclaration"/>

        <!-- Avoid modifying control variables -->
        <module name="ModifiedControlVariable"/>

        <!-- Require this. for field access when shadowed -->
        <module name="RequireThis">
            <property name="checkFields" value="false"/>
            <property name="checkMethods" value="false"/>
            <property name="validateOnlyOverlapping" value="true"/>
        </module>

        <!-- ========================================== -->
        <!-- ANNOTATIONS                                 -->
        <!-- ========================================== -->

        <!-- Annotation location -->
        <module name="AnnotationLocation">
            <property name="allowSamelineMultipleAnnotations" value="false"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
            <property name="allowSamelineParameterizedAnnotation" value="false"/>
        </module>

        <!-- ========================================== -->
        <!-- MODIFIERS                                   -->
        <!-- ========================================== -->

        <!-- Enforce standard modifier order -->
        <module name="ModifierOrder"/>

        <!-- No redundant modifiers -->
        <module name="RedundantModifier"/>

    </module>

    <!-- ========================================== -->
    <!-- FILE-LEVEL CHECKS                           -->
    <!-- ========================================== -->

    <!-- File must end with newline -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- No tab characters -->
    <module name="FileTabCharacter"/>

</module>
